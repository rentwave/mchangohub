name: Deploy Mchangohub to Master

on:
  workflow_dispatch:
  push:
    branches:
      - master

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: osiru/mchangohub

jobs:
  pre-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      docker_tag: ${{ steps.set-docker-tag.outputs.docker_tag }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Docker Tag
        id: set-docker-tag
        run: |
          GIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
          DOCKER_TAG="master-${GIT_HASH}-$(date +%s)"
          echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          echo "Building with tag: ${DOCKER_TAG}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.set-docker-tag.outputs.docker_tag }}

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.set-docker-tag.outputs.docker_tag }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          ulimit: |
            nofile=65536:65536
          shm-size: 2g

  verify:
    name: Verify Server Setup
    runs-on: ubuntu-latest
    needs: pre-build
    steps:
      - name: Verify environment on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.MCHANGOHUB_SERVER_IP }}
          username: ${{ secrets.MCHANGOHUB_SSH_USER }}
          port: 22
          key: ${{ secrets.MCHANGOHUB_SSH_KEY }}
          timeout: 300s
          script: |
            set -euo pipefail
            echo "üîç Checking server setup..."
            cd /srv/apps/live/mchangohub/ || exit 1

            # check docker
            if ! command -v docker &>/dev/null; then
              echo "‚ùå Docker is not installed"
              exit 1
            fi

            # check docker-compose (warn only if missing compose file)
            if ! command -v docker compose &>/dev/null; then
              echo "‚ùå Docker Compose is not installed"
              exit 1
            fi

            if [[ ! -f docker-compose.yml ]]; then
              echo "‚ö†Ô∏è Warning: docker-compose.yml not found, skipping file check"
            else
              echo "‚úÖ docker-compose.yml found"
            fi

            echo "‚úÖ Server verification passed"

  deploy:
    name: Deploy to Master Server
    needs: [pre-build, verify]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.MCHANGOHUB_SERVER_IP }}
          username: ${{ secrets.MCHANGOHUB_SSH_USER }}
          port: 22
          key: ${{ secrets.MCHANGOHUB_SSH_KEY }}
          timeout: 600s
          script: |
            set -euo pipefail
            echo "üöÄ Starting deployment..."
            cd /srv/apps/live/mchangohub/ || exit 1

            git fetch origin master
            git reset --hard origin/master

            LATEST_TAG="${{ needs.pre-build.outputs.docker_tag }}"
            echo "Using Docker tag: ${LATEST_TAG}"

            # backup and write new env
            if [[ -f .env ]]; then
              cp .env .env.backup.$(date +%s)
            fi
            {
              echo "BACKEND_TAG=${LATEST_TAG}"
              echo "DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
              echo "GIT_COMMIT=${{ github.sha }}"
            } > .env

            docker pull osiru/mchangohub:${LATEST_TAG}

            echo "Stopping current services..."
            docker compose down --remove-orphans || true

            echo "Starting services..."
            docker compose pull --ignore-pull-failures
            docker compose up -d --force-recreate --remove-orphans

            sleep 10
            docker compose ps
            if docker compose ps --services --filter "status=running" | grep -q .; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment failed"
              docker compose logs --tail=50
              exit 1
            fi

  clean:
    name: Clean Docker Cache
    needs: [pre-build, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()
    steps:
      - name: Clean Docker cache on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.MCHANGOHUB_SERVER_IP }}
          username: ${{ secrets.MCHANGOHUB_SSH_USER }}
          port: 22
          key: ${{ secrets.MCHANGOHUB_SSH_KEY }}
          timeout: 120s
          script: |
            set -euo pipefail
            echo "üßπ Cleaning up Docker..."
            docker images osiru/mchangohub --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
              tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}' | \
              xargs -r docker rmi || true
            docker image prune -f --filter "until=24h"
            docker builder prune -f --keep-storage=1GB
            docker system prune -f --volumes --filter "until=24h"
            echo "‚úÖ Docker cleanup complete"

  notify:
    name: Deployment Notification
    ne
